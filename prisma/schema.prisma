generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  emailVerified     DateTime?
  image             String?
  name              String?
  email             String             @unique
  password          String?
  phone             String?
  created_at        DateTime           @default(now())
  Account           Account[]
  ChatMessages      ChatMessage[]
  GroupChatMessages GroupChatMessage[]
  Chats1            Chat[]             @relation("User1")
  Chats2            Chat[]             @relation("User2")
  Participants      Participant[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Chat {
  id        String        @id @default(cuid())
  user1     String
  user2     String
  create_at DateTime      @default(now())
  messages  ChatMessage[]
  user1Ref  User          @relation("User1", fields: [user1], references: [id])
  user2Ref  User          @relation("User2", fields: [user2], references: [id])
}

model GroupChat {
  id           String             @id @default(cuid())
  group_name   String
  img_url      String?
  creator_id   String
  create_at    DateTime           @default(now())
  messages     GroupChatMessage[]
  participants Participant[]
}

model ChatMessage {
  id         String   @id @default(cuid())
  message    String
  sender_id  String
  create_at  DateTime @default(now())
  media_link String?
  chat_id    String
  chat       Chat     @relation(fields: [chat_id], references: [id])
  sender     User     @relation(fields: [sender_id], references: [id])
}

model GroupChatMessage {
  id         String    @id @default(cuid())
  message    String
  sender_id  String
  create_at  DateTime  @default(now())
  media_link String?
  group_id   String
  group      GroupChat @relation(fields: [group_id], references: [id])
  sender     User      @relation(fields: [sender_id], references: [id])
}

model VerificationToken {
  id      String   @unique @default(uuid())
  email   String
  token   String   @unique
  expires DateTime
  @@unique([email, token]) //this mean there is unique token for email
}

model Participant {
  id        String    @id @default(cuid())
  user_id   String
  joined_at DateTime  @default(now())
  group_id  String
  user      User      @relation(fields: [user_id], references: [id])
  group     GroupChat @relation(fields: [group_id], references: [id])
}
